package xjsnark.bug2;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.config.Config;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.SmartMemory;
import util.Util;
import backend.eval.CircuitEvaluator;

public class bug2 extends CircuitGenerator {



  public static void main(String[] args) {
    Config.multivariateExpressionMinimization = true;

    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see other examples) 
    Config.writeCircuits = true;
    Config.outputFilesPath = "/home/deepak/Desktop/candid/circuits/";
    new bug2();
  }

  public bug2() {
    super("bug2");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("SampleTest_Full", true) {
      public void pre() {
        // assigning values to inputs 
        int len = 10;
        for (int i = 0; i < arr1.length; i++) {
          arr1[i].mapValue(BigInteger.valueOf(0), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        }

        numBytes.mapValue(BigInteger.valueOf(len), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
      }
      public void post() {
      }

    });

  }



  public void __init() {
    numBytes = new UnsignedInteger(32, new BigInteger("0"));
    arr1 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{3 * AES_BLOCK_SIZE}, 8);
  }

  public UnsignedInteger numBytes;
  public UnsignedInteger[] arr1;
  public SmartMemory<UnsignedInteger> ram_arr1;

  private static int AES_BLOCK_SIZE = 16;
  @Override
  public void __defineInputs() {
    super.__defineInputs();
    numBytes = UnsignedInteger.createInput(this, 32);


    arr1 = (UnsignedInteger[]) UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(arr1), 8);









  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();







  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();















  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();












  }
  public void outsource() {
    ram_arr1 = new SmartMemory(arr1, UnsignedInteger.__getClassRef(), new Object[]{"8"});

    for (int i = 0; i < 32; i++) {
      UnsignedInteger k = ram_arr1.read(UnsignedInteger.instantiateFrom(5, i).add(numBytes));
    }
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
